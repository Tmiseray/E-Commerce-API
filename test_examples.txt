
1. Add Customer:
{
    "name": "Jane Doe",
    "email": "jane.doe@example.com",
    "phone": "1234567890"
}
{
    "name": "John Smith",
    "email": "john.smith@example.com",
    "phone": "9876543210"
}
{
    "name": "Jim Doe",
    "email": "jim.doe@example.com",
    "phone": "3216549870"
}
{
    "name": "Mary Smith",
    "email": "mary.smith@example.com",
    "phone": "7894561230"
}


2. Get Customer by ID
Query Params:
Key: id
Value: 1


3. Update Customer:
http://127.0.0.1:5000/customers/1
{
    "name": "Jane Doe",
    "email": "jane.doe@example.com",
    "phone": "1234567890"
}
** Completes process even if it has not changed

{
    "name": "Jane Dough",
    "email": "jane.dough@example.com"
}
** If data incomplete, it will still update due to Schema fields(email, phone) required=False
** Also setup for retrieving current data if nothing is being changed


4. Create Customer Account:
{
    "customer_id": 2,
    "username": "john",
    "password": "john"
}
** notifies that each key is shorter than minimum length

{
    "customer_id": 2,
    "username": "john_boy",
    "password": "Mary_is_my_world"
}

5. Get (Customer) Account:
Query Params:
Key: customer_id
Value: 2
{
    "customer_id": 2,
    "password": "$2b$12$WNg48Nf2JvR5jy4CKz7SS.VEtbh6uFZf3CwcxHlHHLxphLMhOYYMW",
    "username": "john_boy"
}
** Only returns HASHED password for additional security

6. Update (Customer) Account:
Query Params:
Key: customer_id
Value: 2
{
    "password": "My"
}
** notifies the key is too shorter

{
    "password": "My_heart_belongs_to_Mary"
}
** Successful message! Due to differentiating schemas for creation and updating accounts, the application will still update the singular field. Checks if any/each field exists

7. Add Product:
{
    "name": "gaming keyboard",
    "price": 15.99
}
{
    "name": "mouse",
    "price": 8.99
}
{
    "name": "webcam",
    "price": 19.99
}
{
    "name": "MacBook Pro",
    "price": 1699.99
}

8. Update Product:
{
    "price": 19.99
}
** Success! Due to different schema for updates, you can update one section versus having to type each field

9. Update Stock by Product ID:
Query Params:
Key: product_id
Value: 1
{
    "product_stock": 25
}
Query Params:
Key: product_id
Value: 2
{
    "product_stock": 30
}
Query Params:
Key: product_id
Value: 3
{
    "product_stock": 20
}
Query Params:
Key: product_id
Value: 4
{
    "product_stock": 15
}
** Success

10. Place Order:
JSON Body:
{
    "customer_id": 2,
    "order_details": [
        {
            "product_id": 3,
            "quantity": 11
        },
        {
            "product_name": "MacBook Pro",
            "quantity": 20
        },
        {
            "product_id": 1,
            "quantity": 11
        }
    ]
}
** Unsuccessful! "error": "Insufficient stock for 20 MacBook Pro"
** Checks the catalog stock to ensure the quantity of item is available

JSON Body:
{
    "customer_id": 2,
    "order_details": [
        {
            "product_id": 3,
            "quantity": 11
        },
        {
            "product_name": "MacBook Pro",
            "quantity": 10
        },
        {
            "product_id": 1,
            "quantity": 11
        }
    ]
}
** Success!
{
    "message": "Order placed successfully",
    "order_details": [
        {
            "order_id": 5,
            "price_per_unit": 19.99,
            "product_id": 3,
            "product_name": "webcam",
            "quantity": 11
        },
        {
            "order_id": 5,
            "price_per_unit": 1699.99,
            "product_id": 4,
            "product_name": "MacBook Pro",
            "quantity": 10
        },
        {
            "order_id": 5,
            "price_per_unit": 19.99,
            "product_id": 1,
            "product_name": "gaming keyboard",
            "quantity": 11
        }
    ],
    "order_id": 5
}

** Updated JSON Results to include order_date_time

JSON Body:
{
    "customer_id": 3,
    "order_details": [
        {
            "product_id": 2,
            "quantity": 8
        },
        {
            "product_name": "webcam",
            "quantity": 5
        },
        {
            "product_id": 4,
            "quantity": 1
        }
    ]
}
** Success!
{
    "message": "Order placed successfully",
    "order_date_time": "Wed, 04 Sep 2024 17:41:43 GMT",
    "order_details": [
        {
            "order_id": 7,
            "price_per_unit": 8.99,
            "product_id": 2,
            "product_name": "mouse",
            "quantity": 8
        },
        {
            "order_id": 7,
            "price_per_unit": 19.99,
            "product_id": 3,
            "product_name": "webcam",
            "quantity": 5
        },
        {
            "order_id": 7,
            "price_per_unit": 1699.99,
            "product_id": 4,
            "product_name": "MacBook Pro",
            "quantity": 1
        }
    ],
    "order_id": 7
}
** Success

JSON Body:
{
    "customer_id": 2,
    "order_details": [
        {
            "product_id": 1,
            "quantity": 8
        },
        {
            "product_name": "mouse",
            "quantity": 13
        },
        {
            "product_id": 4,
            "quantity": 1
        }
    ]
}

RESULTS:
{
    "message": "Order placed successfully",
    "order_date_time": "Wed, 04 Sep 2024 20:34:41 GMT",
    "order_details": [
        {
            "order_id": 8,
            "price_per_unit": 19.99,
            "product_id": 1,
            "product_name": "gaming keyboard",
            "quantity": 8
        },
        {
            "order_id": 8,
            "price_per_unit": 8.99,
            "product_id": 2,
            "product_name": "mouse",
            "quantity": 13
        },
        {
            "order_id": 8,
            "price_per_unit": 1699.99,
            "product_id": 4,
            "product_name": "MacBook Pro",
            "quantity": 1
        }
    ],
    "order_id": 8,
    "total_amount": "1976.78"
}


11. Get Order by ID:
URL:
http://127.0.0.1:5000/orders/7
Results:
{
    "customer_id": 3,
    "expected_delivery_date": "2024-09-09",
    "order_date_time": "2024-09-04T17:41:43",
    "order_details": [
        {
            "order_id": 7,
            "price_per_unit": 8.99,
            "product_id": 2,
            "product_name": "mouse",
            "quantity": 8
        },
        {
            "order_id": 7,
            "price_per_unit": 19.99,
            "product_id": 3,
            "product_name": "webcam",
            "quantity": 5
        },
        {
            "order_id": 7,
            "price_per_unit": 1699.99,
            "product_id": 4,
            "product_name": "MacBook Pro",
            "quantity": 1
        }
    ],
    "total_amount": 1871.86
}
** Success

11. Track Order Status:
Query Params:
Key: order_id
Value: 7
Key: customer_id
Value: 3
Results:
{
    "customer_id": "3",
    "expected_delivery_date": "Mon, 09 Sep 2024 00:00:00 GMT",
    "message": "Order tracking information",
    "order_date_time": "Wed, 04 Sep 2024 17:41:43 GMT",
    "order_id": "7",
    "status": "Order in process"
}
** Success!

12. Update Stock by Product ID:
Query Params:
Key: product_id
Value: 4
JSON Request:
{
    "product_stock": 6
}
RESULT:
{
    "message": "Successfully updated stock in catalog for Product ID: 4, New Stock Level: 6"
}

13. Monitor Stock Levels:
RESULTS:
{
    "Products Below Threshold": [
        {
            "product_id": 1,
            "product_name": "gaming keyboard",
            "product_stock": 6
        },
        {
            "product_id": 2,
            "product_name": "mouse",
            "product_stock": 9
        }
    ],
    "Restocking Details": [
        {
            "new_stock_quantity": 26,
            "product_id": 1
        },
        {
            "new_stock_quantity": 29,
            "product_id": 2
        }
    ],
    "message": "Stock levels checked and restocked where necessary"
}
** Success

.~* Attempt when full stock *~.
{
    "Products Below Threshold": [],
    "Restocking Details": [],
    "message": "No products below stock threshold: 10"
}
** Success

14. Order History by Customer ID:

Query Params:
Key: customer_id
Value: 2
RESULTS:
[
    {
        "order_date_time": "Wed, 04 Sep 2024 17:36:40 GMT",
        "order_details": [
            {
                "order_id": 5,
                "price_per_unit": 19.99,
                "product_id": 1,
                "product_name": "gaming keyboard",
                "quantity": 11
            },
            {
                "order_id": 5,
                "price_per_unit": 19.99,
                "product_id": 3,
                "product_name": "webcam",
                "quantity": 11
            },
            {
                "order_id": 5,
                "price_per_unit": 1699.99,
                "product_id": 4,
                "product_name": "MacBook Pro",
                "quantity": 10
            }
        ],
        "order_id": 5,
        "total_amount": "17439.68"
    },
    {
        "order_date_time": "Wed, 04 Sep 2024 20:34:41 GMT",
        "order_details": [
            {
                "order_id": 8,
                "price_per_unit": 19.99,
                "product_id": 1,
                "product_name": "gaming keyboard",
                "quantity": 8
            },
            {
                "order_id": 8,
                "price_per_unit": 8.99,
                "product_id": 2,
                "product_name": "mouse",
                "quantity": 13
            },
            {
                "order_id": 8,
                "price_per_unit": 1699.99,
                "product_id": 4,
                "product_name": "MacBook Pro",
                "quantity": 1
            }
        ],
        "order_id": 8,
        "total_amount": "1976.78"
    }
]
** Success

15. Soft Delete Product:
Query Params:
Key: id
Value: 3

RESULTS:
{
    "message": "Successfully deactivated product from catalog"
}
** Success!
* Using Soft Delte methods ensure if there are orders in progress or the product is in a customer's order history, they will still be able to see the details without another customer being able to order an unavailable product

* Checking Catalog:
Get Full Catalog:
[
    {
        "product_id": 1,
        "product_stock": 26
    },
    {
        "product_id": 2,
        "product_stock": 29
    },
    {
        "product_id": 3,
        "product_stock": 0
    },
    {
        "product_id": 4,
        "product_stock": 25
    }
]

* Checking Active Products in Catalog:
[
    {
        "product_id": 1,
        "product_stock": 26
    },
    {
        "product_id": 2,
        "product_stock": 29
    },
    {
        "product_id": 4,
        "product_stock": 25
    }
]

*Checking Customers Orders:
[
    {
        "order_date_time": "Wed, 04 Sep 2024 17:36:40 GMT",
        "order_details": [
            {
                "order_id": 5,
                "price_per_unit": 19.99,
                "product_id": 1,
                "product_name": "gaming keyboard",
                "quantity": 11
            },
            {
                "order_id": 5,
                "price_per_unit": 19.99,
                "product_id": 3,
                "product_name": "webcam",
                "quantity": 11
            },
            {
                "order_id": 5,
                "price_per_unit": 1699.99,
                "product_id": 4,
                "product_name": "MacBook Pro",
                "quantity": 10
            }
        ],
        "order_id": 5,
        "total_amount": "17439.68"
    },
    {
        "order_date_time": "Wed, 04 Sep 2024 20:34:41 GMT",
        "order_details": [
            {
                "order_id": 8,
                "price_per_unit": 19.99,
                "product_id": 1,
                "product_name": "gaming keyboard",
                "quantity": 8
            },
            {
                "order_id": 8,
                "price_per_unit": 8.99,
                "product_id": 2,
                "product_name": "mouse",
                "quantity": 13
            },
            {
                "order_id": 8,
                "price_per_unit": 1699.99,
                "product_id": 4,
                "product_name": "MacBook Pro",
                "quantity": 1
            }
        ],
        "order_id": 8,
        "total_amount": "1976.78"
    }
]

* Checking Order Tracker:
Query Params:
Key: order_id
Value: 5
Key: customer_id
Value: 2
{
    "customer_id": "2",
    "expected_delivery_date": "Mon, 09 Sep 2024 00:00:00 GMT",
    "message": "Order tracking information",
    "order_date_time": "Wed, 04 Sep 2024 17:36:40 GMT",
    "order_id": "5",
    "status": "Order in process"
}
**** SUCCESS ****